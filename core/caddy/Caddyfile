# Auto-generated Caddyfile - DO NOT EDIT MANUALLY
# `npm run generate-config` to regenerate

{
    # Global options for development
    local_certs  # Use local CA for development certificates
    auto_https disable_redirects  # Enable HTTPS but don't force redirects
    
    # PKI configuration for stable test environment
    pki {
        ca local {
            # Set intermediate certificate lifetime to 1 year (default is 7 days)
            # This prevents constant regeneration on different machines
            intermediate_lifetime 365d
        }
    }
    
    # Load the replace-response module
    order replace after encode
    # Load the fail_injector module
    order fail_injector before reverse_proxy
    order fail_injector before file_server
    # Load the on_demand_docker module
    order on_demand_docker before reverse_proxy
    # Load the docker_status module
    order docker_status before reverse_proxy
}

# Logging configuration
(logging) {
    log {
        output file /var/log/caddy/access.log {
            roll_size 100mb
            roll_keep 10
            roll_keep_for 720h
        }
        format json
        level INFO
    }
}

# Performance Zoo auto-injection snippet
(performance_zoo) {
    @notBinary {
        # Exclude common non-HTML content types
        not header Content-Type application/*
        not header Content-Type image/*
        not header Content-Type video/*
        not header Content-Type audio/*
        not header Content-Type font/*
        not header Content-Type model/*
        not header Content-Type multipart/*
        
        # Exclude specific text formats that aren't HTML
        not header Content-Type text/css*
        not header Content-Type text/javascript*
        not header Content-Type text/json*
        not header Content-Type text/csv*
        not header Content-Type text/xml*
        not header Content-Type text/plain*
    }
    
    encode gzip
    
    handle @notBinary {
        # Only inject before </body> - the replace directive won't modify content
        # that doesn't contain this tag, providing natural HTML detection
        replace "</body>" "<script src='https://performance.zoo/shared.js' async defer></script></body>"
        replace "</BODY>" "<script src='https://performance.zoo/shared.js' async defer></script></BODY>"
        
        header X-Performance-Zoo "injected"
    }
}

# Snippet for fail injection (uses environment CHAOS_MODE)
(fail_injection) {
    fail_injector {
        # This will only activate when CHAOS_MODE=1 in environment
        # The fail_injector reads CHAOS_MODE from environment automatically
    }
}

# Common proxy handler for on-demand containers
(proxy_handler) {
    import fail_injection
    on_demand_docker {args[0]} {args[1]} {
        timeout 30
    }
    reverse_proxy {args[0]}:{args[1]} {
        # Trust only the proxy for client IP
        trusted_proxies {$ZOO_PROXY_IP}
        # Caddy will automatically handle X-Forwarded-* headers when trusted_proxies is set
    }
}

auth.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler auth-zoo 3000
    }
}

http://auth.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler auth-zoo 3000
    }
}

excalidraw.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler excalidraw-zoo 80
    }
}

http://excalidraw.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler excalidraw-zoo 80
    }
}

focalboard.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler focalboard-zoo 8000
    }
}

http://focalboard.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler focalboard-zoo 8000
    }
}

gitea.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler gitea-zoo 3000
    }
}

http://gitea.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler gitea-zoo 3000
    }
}

admin.auth.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler hydra 4445
    }
}

http://admin.auth.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler hydra 4445
    }
}

lorem-rss.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler lorem-rss 3000
    }
}

http://lorem-rss.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler lorem-rss 3000
    }
}

search-api.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler meilisearch 7700
    }
}

http://search-api.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler meilisearch 7700
    }
}

miniflux.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler miniflux 8080
    }
}

http://miniflux.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler miniflux 8080
    }
}

northwind.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler northwind 80
    }
}

http://northwind.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler northwind 80
    }
}

oauth-example.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler oauth-example-zoo 3000
    }
}

http://oauth-example.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler oauth-example-zoo 3000
    }
}

performance.zoo {
    import logging
    
    route {
        import proxy_handler performance-zoo 3000
    }
}

http://performance.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    
    route {
        import proxy_handler performance-zoo 3000
    }
}

planka.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler planka 1337
    }
}

http://planka.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    # Site-specific HTTPS-only redirect
    redir https://{host}{uri} permanent
}

search.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler search-zoo 3000
    }
}

http://search.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler search-zoo 3000
    }
}

snappymail.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler snappymail-zoo 8888
    }
}

http://snappymail.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler snappymail-zoo 8888
    }
}

mail-api.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler stalwart 8080
    }
}

http://mail-api.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler stalwart 8080
    }
}

utils.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler utils-zoo 3000
    }
}

http://utils.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler utils-zoo 3000
    }
}

classifieds.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler vwa-classifieds 9980
    }
}

http://classifieds.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler vwa-classifieds 9980
    }
}

wiki.zoo {
    import logging
    import performance_zoo
    
    route {
        import proxy_handler wiki-zoo 8080
    }
}

http://wiki.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import proxy_handler wiki-zoo 8080
    }
}

example.zoo {
    import logging
    import performance_zoo
    
    route {
        import fail_injection
        root * /static/example.zoo/dist
        file_server
        
        header {
            X-Frame-Options "SAMEORIGIN"
            X-XSS-Protection "1; mode=block"
            X-Content-Type-Options "nosniff"
        }
    }
}

http://example.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    # Check if static sites should redirect to HTTPS
    @static_https_only expression "{$ZOO_STATIC_HTTPS_ONLY:false}" == "true"
    redir @static_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import fail_injection
        root * /static/example.zoo/dist
        file_server
        
        header {
            X-Frame-Options "SAMEORIGIN"
            X-XSS-Protection "1; mode=block"
            X-Content-Type-Options "nosniff"
        }
    }
}

status.zoo {
    import logging
    import performance_zoo
    
    route {
        import fail_injection
        root * /static/status.zoo/dist
        file_server
        
        header {
            X-Frame-Options "SAMEORIGIN"
            X-XSS-Protection "1; mode=block"
            X-Content-Type-Options "nosniff"
        }
    }
}

http://status.zoo {
    import logging
    
    # Check if all sites should redirect to HTTPS
    @all_https_only expression "{$ZOO_ALL_HTTPS_ONLY:false}" == "true"
    redir @all_https_only https://{host}{uri} permanent
    
    # Check if static sites should redirect to HTTPS
    @static_https_only expression "{$ZOO_STATIC_HTTPS_ONLY:false}" == "true"
    redir @static_https_only https://{host}{uri} permanent
    
    import performance_zoo
    
    route {
        import fail_injection
        root * /static/status.zoo/dist
        file_server
        
        header {
            X-Frame-Options "SAMEORIGIN"
            X-XSS-Protection "1; mode=block"
            X-Content-Type-Options "nosniff"
        }
    }
}

# Docker Status API - provides container status information
# HTTPS
system-api.zoo {
    import logging
    
    route /docker/* {
        uri strip_prefix /docker
        docker_status
    }
    
    route {
        respond "System API - Docker monitoring for The Zoo

Endpoints:
  GET https://system-api.zoo/docker/ok                         - Health check
  GET https://system-api.zoo/docker/api/containers             - List all containers
  GET https://system-api.zoo/docker/api/containers?stats=true  - List containers with CPU/memory stats
  GET https://system-api.zoo/docker/api/container/{name}/logs  - Get container logs (default: last 50 lines)
  GET https://system-api.zoo/docker/api/system-metrics         - Get system-wide Docker metrics

Features: CORS enabled, auto-filters Zoo containers, 2s stats cache" 200
    }
}

# HTTP
http://system-api.zoo {
    import logging
    
    route /docker/* {
        uri strip_prefix /docker
        docker_status
    }
    
    route {
        respond "System API - Docker monitoring for The Zoo

Endpoints:
  GET https://system-api.zoo/docker/ok                         - Health check
  GET https://system-api.zoo/docker/api/containers             - List all containers
  GET https://system-api.zoo/docker/api/containers?stats=true  - List containers with CPU/memory stats
  GET https://system-api.zoo/docker/api/container/{name}/logs  - Get container logs (default: last 50 lines)
  GET https://system-api.zoo/docker/api/system-metrics         - Get system-wide Docker metrics

Features: CORS enabled, auto-filters Zoo containers, 2s stats cache" 200
    }
}

